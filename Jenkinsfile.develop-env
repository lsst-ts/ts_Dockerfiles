pipeline {
    agent any
    environment {
        registryCredential = "dockerhub-lssttsadmin"

        dockerImageNameMaster = "lsstts/develop-env:master"
        dockerImageNameDevelop = "lsstts/develop-env:develop"
        dockerImageNameBuild = "lsstts/develop-env:b${BUILD_NUMBER}"

        dockerImageMaster = ""
        dockerImageDevelop = ""
        dockerImageBuild = ""
    }    
    parameters {
        string defaultValue: 'b71', description: 'Which tag of salobj docker image to use as base?', name: 'base_image_tag', trim: false
        string defaultValue: 'tags/v2.5.1', description: 'Which version of scriptqueue to build?', name: 'scriptqueue_v', trim: false
        string defaultValue: 'tags/v0.5.0', description: 'Which version of config_attcs to use?', name: 'config_attcs_v', trim: false
        string defaultValue: 'tags/v1.0.1', description: 'Which version of atmcs_v to use?', name: 'atmcs_v', trim: false
        string defaultValue: 'tags/v1.1.2', description: 'Which version of atdome_v to use?', name: 'atdome_v', trim: false
        string defaultValue: 'tags/v0.2.0', description: 'Which version of obscontrol_v to use?', name: 'obscontrol_v', trim: false
        string defaultValue: 'tags/v1.1.0', description: 'Which version of standardscripts_v to use?', name: 'standardscripts_v', trim: false
        string defaultValue: 'tags/v1.3.2', description: 'Which version of atdometraj_v to use?', name: 'atdometraj_v', trim: false
        string defaultValue: 'tags/v0.4.0', description: 'Which version of externalscripts_v to use?', name: 'externalscripts_v', trim: false
        string defaultValue: 'tags/v0.5.0', description: 'Which version of hexrotcomm_v to use?', name: 'hexrotcomm_v', trim: false
        string defaultValue: 'tags/v0.5.tags/v1.0.0', description: 'Which version of simactuators_v to use?', name: 'simactuators_v', trim: false
        booleanParam defaultValue: false, description: 'Build master branch for all repos. Ignores All "_v" parameters.', name: 'build_master'
        booleanParam defaultValue: false, description: 'Build develop branch for all repos. Ignores All "_v" parameters.', name: 'build_develop'
        booleanParam defaultValue: true, description: 'Push the tagged build to docker hub?', name: 'push_tag'
    }
    stages {
        stage("Create docker network.") {
            steps {
                script {
                    sh """
                    docker network create net_b${BUILD_NUMBER} || echo Network exists...
                    """ 
                }
            }

        }    
        stage("Build Docker image (master)") {
            when {
                expression { return env.build_master.toBoolean() }
            }
            steps {
                script {
                    dockerImageMaster = docker.build(dockerImageNameMaster, "--no-cache --network net_b${BUILD_NUMBER} --build-arg atmcs_v=master --build-arg atdome_v=master --build-arg atdometraj_v=master --build-arg standardscripts_v=master --build-arg externalscripts_v=master --build-arg base_image_tag=master --build-arg scriptqueue_v=master --build-arg simactuators_v=master --build-arg hexrotcomm_v=master --build-arg obscontrol_v=master ./develop-env/develop-env/")
                }
            }
        }
        stage("Build Docker image (develop)") {
            when {
                expression { return env.build_develop.toBoolean() }
            }
            steps {
                script {
                    dockerImageDevelop = docker.build(dockerImageNameDevelop, "--no-cache --network net_b${BUILD_NUMBER} --build-arg atmcs_v=develop --build-arg atdome_v=develop --build-arg atdometraj_v=develop --build-arg standardscripts_v=develop --build-arg externalscripts_v=develop --build-arg base_image_tag=develop --build-arg scriptqueue_v=develop --build-arg simactuators_v=develop --build-arg hexrotcomm_v=develop --build-arg obscontrol_v=develop ./develop-env/develop-env/")
                }
            }
        }
        stage("Build Docker image (tag/branch)") {
            when {
                not{
                    anyOf {
                        expression { return env.build_develop.toBoolean() }
                        expression { return env.build_master.toBoolean() }
                    }
                }
            }
            steps {
                script {
                    dockerImageBuild = docker.build(dockerImageNameBuild, "--no-cache --network net_b${BUILD_NUMBER} --build-arg atmcs_v=${env.atmcs_v} --build-arg atdome_v=${env.atdome_v} --build-arg atdometraj_v=${env.atdometraj_v} --build-arg standardscripts_v=${env.standardscripts_v} --build-arg externalscripts_v=${env.externalscripts_v} --build-arg base_image_tag=${env.base_image_tag} --build-arg scriptqueue_v=${env.scriptqueue_v} --build-arg simactuators_v=${env.simactuators_v} --build-arg hexrotcomm_v=${env.hexrotcomm_v} --build-arg obscontrol_v=${env.obscontrol_v} ./develop-env/develop-env/")
                }
            }
        }

        stage("Push Docker image (master)") {
            when {
                expression { return env.build_master.toBoolean() }
            }
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                    dockerImageMaster.push()
                    }
                }
            }
        }
        stage("Push Docker image (develop)") {
            when {
                expression { return env.build_develop.toBoolean() }
            }
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                    dockerImageDevelop.push()
                    }
                }
            }
        }
        stage("Push Docker image (tag/branch)") {
            when {
                allOf {
                    expression { return env.push_tag.toBoolean() }
                    not{
                        anyOf {
                            expression { return env.build_develop.toBoolean() }
                            expression { return env.build_master.toBoolean() }
                        }
                    }
                }
            }
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                    dockerImageBuild.push()
                    }
                }
            }
        }        
    }
    post {
        cleanup {
            sh "docker network rm net_b${BUILD_NUMBER}"
        }
    }
}
