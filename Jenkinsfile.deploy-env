pipeline {
    agent any
    environment {
        registryCredential = "dockerhub-lssttsadmin"
        nexusRegistryCredential = "nexus3-lsst_jenkins"

        dockerImageNameBuild = "lsstts/deploy-env:salobj_${SALOBJ_VERSION}"
        dockerImageBuild = ""
    }
    parameters {
        string defaultValue: "5.15.0", description: "The SalObj version.", name: 'SALOBJ_VERSION', trim: true
        string defaultValue: "6.9.0-7", description: "The OpenSplice version.", name: 'OPENSPLICE_VERSION', trim: true
        string defaultValue: "v6.9.190925_7", description: "The dds python binding version.", name: 'DDS_VERSION', trim: true
        booleanParam defaultValue: false, description: "Push the build image to the docker registries.", name: 'push_tag'
    }
    stages {
        stage("Create docker network.") {
            steps {
                script {
                    sh """
                    docker network create net_b${BUILD_NUMBER} || echo Network exists...
                    """
                }
            }

        }
        stage("Build Docker image") {
            steps {
                script {
                    dockerImageBuild = docker.build(dockerImageNameBuild, "--no-cache --network net_b${BUILD_NUMBER} --build-arg SALOBJ_VERSION=${SALOBJ_VERSION} --build-arg OPENSPLICE_VERSION=${OPENSPLICE_VERSION} --build-arg DDS_VERSION=${DDS_VERSION} ./deploy-env/conda/")
                }
            }
        }
        stage("Push Docker image") {
            steps {
                script {
                    docker.withRegistry("", registryCredential) {
                        dockerImageBuild.push()
                    }
                    docker.withRegistry("https://ts-dockerhub.lsst.org/", nexusRegistryCredential) {
                        sh script: """
                            docker tag ${dockerImageNameBuild} ts-dockerhub.lsst.org/deploy-env:salobj_${SALOBJ_VERSION}
                            docker push ts-dockerhub.lsst.org/deploy-env:salobj_${SALOBJ_VERSION}
                        """
                    }
                }
            }
        }
    }
    post {
        cleanup {
            sh "docker network rm net_b${BUILD_NUMBER}"
        }
    }
}
