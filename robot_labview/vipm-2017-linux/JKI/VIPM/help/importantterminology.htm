<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Important Terminology</TITLE>
<META content="text/html; charset=Windows-1252" http-equiv=Content-Type><LINK 
rel=stylesheet type=text/css href="Theme/nav.css"><LINK rel=stylesheet 
type=text/css href="Theme/popupmenu.css"><LINK rel=stylesheet type=text/css 
href="Theme/lf.css"><LINK rel=stylesheet type=text/css 
href="LinksExt/C1H_HTML.css"><LINK rel=stylesheet type=text/css 
href="LinksExt/VI Package Manager User Guide.css">
<SCRIPT type=text/javascript>



var _needIndentation = false;



</SCRIPT>

<SCRIPT language=JavaScript src="linker.js">

</SCRIPT>

<SCRIPT language=JavaScript src="special.js">

</SCRIPT>

<SCRIPT language=JavaScript src="common.js">

</SCRIPT>

<meta name="Generator" content="ComponentOne Doc-To-Help v.2011.1.0.627">
<meta name="D2HTheme" content="VIPM2010Theme v.151">
</HEAD>
<BODY onload=d2hOnLoadToolbar(event); 
style="OVERFLOW: hidden; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 5px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: #535353" 
relPart="">
<SCRIPT language=javascript>



d2hTopicPreOpen();



d2hTrySyncTOC();







var prev = true;





var next = true;



if (typeof d2hInitMainThemeHandlers != "undefined")

    d2hInitMainThemeHandlers(prev, next);

d2hAdjustTopicBorders(document);    



if (typeof d2hLoadWindows != "undefined")

    d2hLoadWindows();

if (typeof d2hLoadNavUrls != "undefined")

    d2hLoadNavUrls();



</SCRIPT>

<DIV id=D2HTopicOuterBody class=d2h_outer_topic 
style="OVERFLOW: auto; HEIGHT: 100%; WIDTH: 100%; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: white">
<DIV id=nsbanner class=d2hNavigatorTopic>
<DIV id=TitleRow class=d2h_main_titlerow 
style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px">
<DIV style="DISPLAY: none"><A id=D2HPreviousAnchor href="proedition.htm"></A><A 
id=D2HNextAnchor href="overviewofvipminterface.htm"></A></DIV></DIV>
<SCRIPT language=javascript>

if (typeof d2hProcessTopicNavForCSH != "undefined")

    d2hProcessTopicNavForCSH();

</SCRIPT>
</DIV>
<DIV id=nstext class=d2h_main_nstext 
style="HEIGHT: 100%; PADDING-BOTTOM: 10px; PADDING-TOP: 5px; PADDING-LEFT: 22px; PADDING-RIGHT: 10px" 
valign="bottom">
<DIV id=d2h_breadcrumbs class=d2h_breadcrumbs><SPAN 
class=d2h_breadcrumbsContentsOnly>VI Package Manager (VIPM)</SPAN></DIV>
<H2><A name=_Toc385809699></A><A name=_Enterprise_Edition></A>Important 
Terminology</H2>
<P class=MsoBodyText><B>Package: </B>A package is a file which contains all of 
the necessary components wrapped together along with the actual tool which is to 
be installed. The package provides information related to its destination, 
compatible LabVIEW versions etc. Package files are saved in the *.VIP 
format.</P>
<P class=MsoBodyText><B>Package Repository: </B>It is a central location 
containing packages. It can be a URL or a Path. Once a subscription to a 
repository is created, VIPM will fetch all the packages in the repository. By 
default, VIPM is subscribed to the <A 
href="usingthelabviewtoolsnetworkview.htm">LabVIEW Tools Network</A> repository 
and the <A href="thevipackagenetwork.htm">VI Package Network</A> repository. You 
can also subscribe to any other custom repositories created if you have VIPM 
Pro.</P>
<P class=MsoBodyText><B>Subscription:</B> You can subscribe to a repository in 
VIPM by adding the subscription URL into the network settings of VIPM. VIPM can 
then check the subscription to see if there are new packages or updates to 
installed packages.</P>
<P class=MsoBodyText><B>LabVIEW Version: </B>This is the version of LabVIEW for 
which VIPM will manage packages. VIPM is capable of managing packages for any 
LabVIEW version you have installed.</P>
<P class=MsoBodyText><B>Library: </B>The library is simply a location (folder) 
on your computer where the packages are downloaded from the repository before 
installing. This location is defined internally by VIPM and you cannot change 
it. You can have packages in your library that do not exist in a repository. 
When installing\downloading packages, VIPM places the original package file into 
this library so that you can later uninstall\reintstall the package as 
needed.</P>
<P class=MsoBodyText><B>Unpublished: </B>If you have packages in your library 
(see above) that do not exist in any repository, then the package is considered 
unpublished. This can typically happen if you build your own packages and 
install them but do not publish them to a repository.</P>
<P class=MsoBodyText><B>Package Configuration (File):</B> This is a list of 
packages that is managed as a group and applies to a specific LabVIEW version. 
This list can be saved to a file and later recalled and applied. You can create 
package configurations using the <A 
href="usingpackageconfigurationeditor.htm">VI Package Configuration Editor 
window</A>. Package configurations are saved as *.VIPC files.</P>
<P class=MsoBodyText><B>Deprecated: </B>A package is considered deprecated when 
a repository manager (a person who manages the repository) marks a package as 
deprecated in the repository. This can be done via the <A 
href="usingvirepositorymanager.htm">Repository Manager window</A>. Typically, a 
package is deprecated because a new version of the package is available and the 
package publisher doesn’t want others using the old package. Deprecated packages 
are hidden in the VIPM package list by default, but can be made visible changing 
a setting in the VIPM Options.</P>
<P class=MsoBodyText><B>Dependency: </B>A package is considered to have a 
dependency if it relies on one or more other packages being installed in LabVIEW 
for it to function correctly. VIPM automatically installs these dependencies if 
a package depends on other packages. These dependencies are defined during the 
package building phase.</P>
<P class=MsoBodyText><B>Sub-package:</B> Sometimes, when building a package, 
it’s necessary to have some files install outside of the LabVIEW target folder. 
When this happens, VIPM creates a parent package that contains another 
sub-package inside of it that targets the system environment (these sub-packages 
are sometimes called System Packages). When you install this parent package, 
VIPM extracts the sub-package and places it beside the parent package and 
installs it together. VIPM normally hides these packages from your package list, 
but you may see them listed or referenced in some dialogs.</P>
<P class=MsoBodyText>&nbsp;</P>
<TABLE id=tblCustFooter class=d2h_cust cellSpacing=0 cellPadding=0 width="100%" 
border=0>
  <TBODY>
  <TR class=d2h_cust>
    <TD class=d2h_cust align=center><SPAN style="FONT-STYLE: italic"><BR>If 
      you have any feedback or questions (including ideas for other topics you'd 
      like to learn more about), please contact us using our </SPAN><A 
      style="FONT-STYLE: italic" href="http://jki.net/support" 
      target=_blank>support page</A><SPAN style="FONT-STYLE: italic">. 
      &nbsp;We're looking forward to your feedback.</SPAN> <BR><BR>All Contents, 
      Copyright © 2006-2014, <A href="http://jki.net" target=untitled>JKI</A>. 
      All Rights Reserved. </TD></TR></TBODY></TABLE></DIV></DIV></BODY></HTML>
